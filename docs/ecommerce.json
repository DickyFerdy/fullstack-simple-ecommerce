{
  "openapi": "3.0.3",
  "info": {
    "title": "E-commerce RESTful API",
    "version": "1.0.0",
    "description": "Ini adalah spesifikasi untuk RESTful API yang menyediakan layanan eCommerce. API ini memungkinkan pengguna untuk melakukan berbagai operasi pada toko online, termasuk pengelolaan produk, keranjang belanja, pesanan, pembayaran, dan informasi pengguna.",
    "contact": {
      "name": "Moch Dicky Ferdyansyah",
      "email": "dickyferdy5@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://mit-license.org/"
    }
  },
  "servers": [
    {
      "description": "E-commerce RESTful API Server",
      "url": "https://ecommerce-dickyferdy.vercel.app/api/v1"
    }
  ],
  "paths": {
    "/register": {
      "post": {
        "tags": ["User"],
        "summary": "Register User",
        "description": "Register new user to api",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Name for new register",
                    "type": "string",
                    "minLength": 2
                  },
                  "username": {
                    "description": "Username for new register",
                    "type": "string",
                    "minLength": 4
                  },
                  "email": {
                    "description": "Email for new register",
                    "type": "string"
                  },
                  "password": {
                    "description": "Password for new register",
                    "type": "string",
                    "format": "password",
                    "minLength": 4
                  }
                },
                "required": [
                  "name",
                  "username",
                  "email",
                  "password"
                ]
              },
              "examples": {
                "dicky": {
                  "description": "Example Register new user Dicky",
                  "value": {
                    "name": "dicky",
                    "username": "dickyferdy",
                    "email": "dickyferdy@gmail.com",
                    "password": "rahasia123"
                  }
                },
                "shiro": {
                  "description": "Example Register new user Shiro",
                  "value": {
                    "name": "shiro",
                    "username": "shiro123",
                    "email": "shiro@mail.com",
                    "password": "rahasia789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success register new user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "dicky": {
                    "description": "Success register new user Dicky",
                    "value": {
                      "data": {
                        "name": "dicky",
                        "username": "dickyferdy",
                        "email": "dickyferdy@gmail.com"
                      }
                    }
                  },
                  "shiro": {
                    "description": "Success register new user Shiro",
                    "value": {
                      "data": {
                        "name": "shiro",
                        "username": "shiro123",
                        "email": "shiro@mail.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed register new user, username minimal length is 4",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed register new user",
                    "value": {
                      "error": "Username minimal length is 4 characters"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Failed register new user, username already taken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed register new user",
                    "value": {
                      "error": "Username already taken"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed register new user, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed register new user",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": ["User"],
        "summary": "Login User",
        "description": "Login existing user to api",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "description": "Username for login",
                    "type": "string",
                    "minLength": 4
                  },
                  "password": {
                    "description": "Password for login",
                    "type": "string",
                    "format": "password",
                    "minLength": 4
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              "examples": {
                "dicky": {
                  "description": "Example login user Dicky",
                  "value": {
                    "username": "dickyferdy",
                    "password": "rahasia123"
                  }
                },
                "shiro": {
                  "description": "Example login user Shiro",
                  "value": {
                    "username": "shiro123",
                    "password": "rahasia789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Successfully login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "login success",
                    "value": {
                      "data": {
                        "accessToken": "aubdubahbyuB"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "User Failed login, wrong password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed login user, wrong Password",
                    "value": {
                      "error": "Invalid Username or Password"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User Failed login, username not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed login user, Username not found",
                    "value": {
                      "error": "Invalid Username or Password"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "User Failed login, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed login user",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
             "bearerAuth": []
          }
       ],
        "tags": ["User"],
        "summary": "Get user data",
        "description": "Get current user data",
        "responses": {
          "200": {
            "description": "Success get all user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "dicky": {
                    "description": "Success get all data user Dicky",
                    "value": {
                      "data": {
                        "name": "dicky",
                        "username": "dickyferdy",
                        "email": "dickyferdy@gmail.com"
                      }
                    }
                  },
                  "shiro": {
                    "description": "Success get all data user Shiro",
                    "value": {
                      "data": {
                        "name": "shiro",
                        "username": "shiro123",
                        "email": "shiro@mail.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get all user data, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed get all user data, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed get all user data, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed get all data user, user is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all user data",
                    "value": {
                      "error": "User is not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get all user data, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all user data",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
             "bearerAuth": []
          }
       ],
        "tags": ["User"],
        "summary": "Update user data",
        "description": "Update current user data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "update name",
                    "type": "string",
                    "minLength": 2
                  },
                  "email": {
                    "description": "update email",
                    "type": "string"
                  },
                  "password": {
                    "description": "update password",
                    "type": "string",
                    "format": "password",
                    "minLength": 4
                  }
                }
              },
              "examples": {
                "dicky": {
                  "description": "Example update user Dicky",
                  "value": {
                    "email": "dickyferdy1@gmail.com"
                  }
                },
                "shiro": {
                  "description": "Example update user Shiro",
                  "value": {
                    "password": "shiro789"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success update current user data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user_id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "password": {
                          "type": "string",
                          "format": "password"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "dicky": {
                    "description": "Success update user Dicky",
                    "value": {
                      "message": "Update Success",
                      "data": {
                        "name": "dicky",
                        "username": "dickyferdy1",
                        "email": "dickyferdy1@gmail.com"
                      }
                    }
                  },
                  "shiro": {
                    "description": "Success update user Shiro",
                    "value": {
                      "message": "Update Success",
                      "data": {
                        "name": "shiro",
                        "username": "shiro123",
                        "email": "shiro@mail.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed update user, password minimal length is 4",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed update user",
                    "value": {
                      "error": "Password minimal length is 4 characters"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Failed update user, email is already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed update user",
                    "value": {
                      "error": "Email is already in use"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed update user Dicky, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed update user",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "get": {
        "tags": ["Token"],
        "summary": "Get new accessToken",
        "description": "Get new accessToken for login",
        "responses": {
          "200": {
            "description": "Success get new accessToken",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "Success get new accessToken",
                    "value": {
                      "data": {
                        "accessToken": "abdabduabdad"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get new accessToken, invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "refreshToken not provided": {
                    "description": "Failed get new accessToken, refreshToken not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  },
                  "invalid refreshToken": {
                    "description": "Failed get new accessToken, invalid refreshToken",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed get new accessToken, user not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get new accessToken, user is not found",
                    "value": {
                      "error": "Unauthorized: User is not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get new accessToken, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get new accessToken, server error",
                    "value": {
                      "error": "Invalid Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["User"],
        "summary": "Logout current user",
        "description": "Logout current user",
        "responses": {
          "200": {
            "description": "Success logout current user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "Success logout current user",
                    "value": {
                      "message": "Logout Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed logout, invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid request": {
                    "description": "Failed logout, invalid request",
                    "value": {
                      "error": "Invalid Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed logout, token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "refreshToken not provided": {
                    "description": "Failed logout, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed logout current user, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed logout, server error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/addresses": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "create user address",
        "description": "create new user address",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "address title",
                    "type": "string"
                  },
                  "street": {
                    "description": "street for address",
                    "type": "string"
                  },
                  "city": {
                    "description": "city for address",
                    "type": "string"
                  },
                  "province": {
                    "description": "province for address",
                    "type": "string"
                  },
                  "country": {
                    "description": "country for address",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "postal code for address",
                    "type": "string"
                  }
                },
                "required": [
                  "title",
                  "street",
                  "city",
                  "province",
                  "country",
                  "postal_code"
                ]
              },
              "examples": {
                "dicky": {
                  "description": "Example create new address user dicky",
                  "value": {
                    "title": "Rumah 1",
                    "street": "jalan 1",
                    "city": "kota 1",
                    "province": "provinsi 1",
                    "country": "Indonesia",
                    "postal_code": "12345"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success create new user address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "address_id": {
                          "type": "integer"
                        },
                        "title": {
                          "type": "string"
                        },
                        "street": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "province": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "postal_code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "dicky": {
                    "description": "Success create new address user dicky",
                    "value": {
                      "data": {
                        "address_id": 1,
                        "title": "Rumah 1",
                        "street": "jalan 1",
                        "city": "kota 1",
                        "province": "provinsi 1",
                        "country": "Indonesia",
                        "postal_code": "12345"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed create new address, street cannot be empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed create new address",
                    "value": {
                      "error": "Street cannot be empty"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed create addresses, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed create addresses, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed create, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed create new address, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed create new address",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "get users addresses",
        "description": "get all users addresses",
        "responses": {
          "200": {
            "description": "Success get all users addresses",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address_id": {
                            "type": "integer"
                          },
                          "title": {
                            "type": "string"
                          },
                          "street": {
                            "type": "string"
                          },
                          "city": {
                            "type": "string"
                          },
                          "province": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string"
                          },
                          "postal_code": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "Success get all users addresses",
                    "value": {
                      "data": [
                        {
                          "address_id": 1,
                          "title": "Rumah 1",
                          "street": "jalan 1",
                          "city": "kota 1",
                          "province": "provinsi 1",
                          "country": "Indonesia",
                          "postal_code": "12345"
                        },
                        {
                          "address_id": 2,
                          "title": "Rumah 2",
                          "street": "jalan 2",
                          "city": "kota 2",
                          "province": "provinsi 2",
                          "country": "Indonesia",
                          "postal_code": "12346"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get all users addresses, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed get all users addresses, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed get all users addresses, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get all users addresses, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all users addresses",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/addresses/{addressId}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "Get address",
        "description": "Get address by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get address by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "street": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "province": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "postal_code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "Success get address by id",
                    "value": {
                      "data": {
                        "title": "Rumah 1",
                        "street": "jalan jalan",
                        "city": "kota 1",
                        "province": "provinsi 1",
                        "country": "Indonesia",
                        "postal_code": "12345"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get address, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed get address, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed get address, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get address, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get address, server error",
                    "value": {
                      "error": "Invalid Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "Update address",
        "description": "Update users address",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "description": "update address title",
                    "type": "string"
                  },
                  "street": {
                    "description": "update street",
                    "type": "string"
                  },
                  "city": {
                    "description": "update city",
                    "type": "string"
                  },
                  "province": {
                    "description": "update province",
                    "type": "string"
                  },
                  "country": {
                    "description": "update country",
                    "type": "string"
                  },
                  "postal_code": {
                    "description": "update postal code",
                    "type": "string"
                  }
                }
              },
              "examples": {
                "dicky": {
                  "description": "Example update address user dicky",
                  "value": {
                    "street": "jalan jalan"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success update users address",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "street": {
                          "type": "string"
                        },
                        "city": {
                          "type": "string"
                        },
                        "province": {
                          "type": "string"
                        },
                        "country": {
                          "type": "string"
                        },
                        "postal_code": {
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "dicky": {
                    "description": "Success update address user dicky",
                    "value": {
                      "message": "Update Success",
                      "data": {
                        "street": "jalan jalan",
                        "city": "kota 1",
                        "province": "provinsi 1",
                        "country": "Indonesia",
                        "postal_code": "12345"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed update address, street cannot be empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed update address",
                    "value": {
                      "error": "Street cannot be empty"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed update address, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed update address",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed update address",
                    "value": "Unauthorized: Token not provided"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed update address, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed update address",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Address"],
        "summary": "Delete address",
        "description": "Delete user address by id",
        "parameters": [
          {
            "$ref": "#/components/parameters/AddressId"
          }
        ],
        "responses": {
          "200": {
            "description": "Success delete user address by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "Success delete address",
                    "value": {
                      "message": "Delete Success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed delete, invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed delete, invalid request",
                    "value": {
                      "error": "Invalid Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed delete, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed delete, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed delete, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed delete, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed delete, server error",
                    "value": {
                      "error": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Category"],
        "summary": "get all categories",
        "description": "get all product categories",
        "responses": {
          "200": {
            "description": "Success get all product categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "category_id": {
                            "type": "integer"
                          },
                          "category_name": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "Success": {
                    "description": "Success get all product categories",
                    "value": {
                      "data": [
                        {
                          "category_id": 1,
                          "category_name": "Fashion"
                        },
                        {
                          "category_id": 2,
                          "category_name": "Electronic"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get all categories, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed get all categories, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed get all categories, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get all categories, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all categories, server error",
                    "value": {
                      "error": "Invalid Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products": {
      "post": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Product"],
        "summary": "create product",
        "description": "create new product",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "product name",
                    "type": "string"
                  },
                  "description": {
                    "description": "product description",
                    "type": "string"
                  },
                  "price": {
                    "description": "product price",
                    "type": "number",
                    "format": "double"
                  },
                  "stock_quantity": {
                    "description": "product quantity",
                    "type": "integer"
                  },
                  "image_path": {
                    "description": "product image",
                    "type": "string"
                  },
                  "category": {
                    "description": "product categories",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "description",
                  "price",
                  "stock_quantity",
                  "image_path",
                  "category"
                ]
              },
              "examples": {
                "adidas Unisex-Child Pureboost 22 Sneaker": {
                  "description": "Example create new products",
                  "value": {
                    "name": "adidas Unisex-Child Pureboost 22 Sneaker",
                    "description": "Made with a series of recycled materials, this upper features at least 50% recycled content.",
                    "price": 55,
                    "stock_quantity": 100,
                    "is_active": true,
                    "image_path": "http://example-image.jpg",
                    "category": ["Fashion"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success create new product",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "product_id": {
                          "type": "integer"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "price": {
                          "type": "number",
                          "format": "double"
                        },
                        "stock_quantity": {
                          "type": "integer"
                        },
                        "is_active": {
                          "type": "boolean"
                        },
                        "image_path": {
                          "type": "string"
                        },
                        "category": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "adidas Unisex-Child Pureboost 22 Sneaker": {
                    "description": "Success create new products",
                    "value": {
                      "data": {
                        "name": "adidas Unisex-Child Pureboost 22 Sneaker",
                        "description": "Made with a series of recycled materials, this upper features at least 50% recycled content.",
                        "price": 55,
                        "stock_quantity": 100,
                        "is_active": true,
                        "image_path": "http://example-image.jpg",
                        "category": ["Fashion"]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Failed create new product",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed create new product, invalid request",
                    "value": {
                      "error": "name cannot be empty"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed create new product, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed create new product, invalid token",
                    "value": {
                      "error": "Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed create new product, token not provided",
                    "value": {
                      "error": "Token not provided"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed create new product, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed create new product, server error",
                    "value": {
                      "error": "Invalid Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Product"],
        "summary": "get all product",
        "description": "get all active product",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "search products using product name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "number of page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "size per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success get all active products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProducts"
                },
                "examples": {
                  "Success": {
                    "description": "Success get all active products",
                    "value": {
                      "data": [
                        {
                          "product_id": 1,
                          "name": "Adidas Sneaker",
                          "price": 55,
                          "image_path": "http://example-image.jpg"
                        }
                      ],
                      "paging": {
                        "page": 1,
                        "total_page": 3,
                        "total_item": 30
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get all active products, invalid token or token not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed get all active products, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed get all active products, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed get all active product, products is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Products is not found",
                    "value": {
                      "error": "Products is not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get all active products, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all active products, server error",
                    "value": {
                      "error": "Invalid Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/products/category/{categoryName}": {
      "get": {
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": ["Product", "Category"],
        "summary": "Get products by category",
        "description": "Get all active products by category name",
        "parameters": [
          {
            "$ref": "#/components/parameters/CategoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success get all active products by category name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetProducts"
                },
                "examples": {
                  "Success": {
                    "description": "Success get active all products by category name",
                    "value": {
                      "data": [
                        {
                          "product_id": 1,
                          "name": "Adidas Sneaker",
                          "price": 55,
                          "image_path": "http://example-image.jpg"
                        }
                      ],
                      "paging": {
                        "page": 1,
                        "total_page": 3,
                        "total_item": 30
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Failed get all active products, invalid token or not provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "invalid token": {
                    "description": "Failed get all active products, invalid token",
                    "value": {
                      "error": "Unauthorized: Invalid token"
                    }
                  },
                  "token not provided": {
                    "description": "Failed get all active products, token not provided",
                    "value": {
                      "error": "Unauthorized: Token not provided"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Failed get all active products, products is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all active products, product is not found",
                    "value": {
                      "error": "Products is not foundss"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed get all active products, server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserError"
                },
                "examples": {
                  "Failed": {
                    "description": "Failed get all active products, server error",
                    "value": {
                      "error": "Invalid Server Error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UserError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "GetProducts": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "product_id": {
                  "type": "integer"
                },
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "number",
                  "format": "double"
                },
                "image_path": {
                  "type": "string"
                }
              }
            }
          },
          "paging": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer"
              },
              "total_page": {
                "type": "integer"
              },
              "total_item": {
                "type": "integer"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "AddressId": {
        "name": "addressId",
        "in": "path",
        "required": true,
        "description": "Address Id",
        "schema": {
          "type": "integer",
          "minLength": 1
        },
        "examples": {
          "Rumah 1": {
            "description": "Sample address id for Rumah 1",
            "value": 1
          }
        }
      },
      "CategoryName": {
        "name": "categoryName",
        "in": "path",
        "required": true,
        "description": "Category Name",
        "schema": {
          "type": "string"
        },
        "examples": {
          "Fashion": {
            "description": "Sample category name for Fashion",
            "value": "Fashion"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}